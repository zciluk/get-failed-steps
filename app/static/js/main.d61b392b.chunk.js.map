{"version":3,"sources":["apis/index.js","components/Spinner/index.js","components/StepsTable/index.js","components/FormHeader/index.js","data/errorStrings.js","components/App/index.js","index.js"],"names":["axios","create","baseURL","rotate","keyframes","AnimatedSpinner","styled","div","Spinner","StepsTable","displayedData","Table","collapsing","color","Header","Row","HeaderCell","Body","filter","item","i","ar","indexOf","map","rowData","key","Cell","x","length","FormHeader","projectID","apiKey","selectedDate","handleChange","searchCall","startHour","endHour","Segment","inverted","Grid","divided","columns","GridColumn","Input","icon","name","value","onChange","placeholder","label","basic","content","labelPosition","type","Button","onClick","errorStrings","getResultsError","getTraceError","getPipelineError","App","urlParameters","URLSearchParams","window","location","search","useState","process","REACT_APP_API_KEY","REACT_APP_PROJECT_ID","get","isError","Date","toISOString","substring","isSearching","pipelinesNumber","jobsNumber","testFailsNumber","dateOfCheck","state","setState","retriveJobs","receivedPipelines","jobsCollection","callsCollection","forEach","pipeline","push","API","id","headers","then","res","data","job","catch","error","console","log","Promise","all","retrieveAndProcessArtifacts","prevState","receivedJobs","stepsContainer","regExp","jobId","a","async","returnedSteps","match","e","target","searchTerm","nextDayDate","setDate","getDate","width","Message","negative","data-testid","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d61b392b.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://gitlab.com/api/v4//\"\n});\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { keyframes } from \"styled-components\";\nconst rotate = keyframes`\nfrom {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst AnimatedSpinner = styled.div`\n  display: block;\n  padding: 2rem;\n  margin: 4rem;\n  border: 1rem solid #cccccc;\n  border-left-color: #777777;\n  border-radius: 50%;\n  width: 5rem;\n  height: 5rem;\n  animation: ${rotate} 1.2s linear infinite;\n`;\n\nconst Spinner = () => {\n  return <AnimatedSpinner />;\n};\n\nexport default Spinner;\n","import React from \"react\";\nimport { Table } from \"semantic-ui-react\";\n\nconst StepsTable = ({ displayedData }) => {\n  return (\n    <Table collapsing color=\"teal\">\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Name of test</Table.HeaderCell>\n          <Table.HeaderCell>Number of Fails</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n\n      <Table.Body>\n        {displayedData\n          .filter((item, i, ar) => ar.indexOf(item) === i)\n          .map(rowData => (\n            <Table.Row key={rowData}>\n              <Table.Cell>{rowData}</Table.Cell>\n              <Table.Cell>\n                {displayedData.filter(x => x === rowData).length}\n              </Table.Cell>\n            </Table.Row>\n          ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default StepsTable;\n","import React from \"react\";\nimport { Segment, Input, Grid, Button, GridColumn } from \"semantic-ui-react\";\nconst FormHeader = ({\n  projectID,\n  apiKey,\n  selectedDate,\n  handleChange,\n  searchCall,\n  startHour,\n  endHour\n}) => {\n  return (\n    <Segment inverted color=\"teal\">\n      <Grid divided=\"vertically\">\n        <Grid.Row columns={3}>\n          <GridColumn>\n            <Input\n              icon=\"gitlab\"\n              name=\"projectID\"\n              value={projectID}\n              onChange={handleChange}\n              placeholder=\"Project ID\"\n              label={{ basic: true, content: \"Project ID\" }}\n              labelPosition=\"left\"\n              type=\"number\"\n            />\n          </GridColumn>\n          <GridColumn>\n            <Input\n              icon=\"key\"\n              name=\"apiKey\"\n              type=\"password\"\n              value={apiKey}\n              onChange={handleChange}\n              placeholder=\"API key\"\n              label={{ basic: true, content: \"API key\" }}\n              labelPosition=\"left\"\n            />\n          </GridColumn>\n          <GridColumn>\n            <Input\n              icon=\"clock\"\n              name=\"selectedDate\"\n              value={selectedDate}\n              onChange={handleChange}\n              placeholder=\"Selected Day\"\n              label={{ basic: true, content: \"Day to check\" }}\n              labelPosition=\"left\"\n              type=\"date\"\n            />\n          </GridColumn>\n        </Grid.Row>\n        <Grid.Row columns=\"3\">\n          <GridColumn>\n            {}\n            <Button onClick={searchCall} color=\"black\">\n              Get results\n            </Button>\n          </GridColumn>\n          <GridColumn>\n            <Input\n              icon=\"clock\"\n              name=\"startHour\"\n              value={startHour}\n              onChange={handleChange}\n              placeholder=\"From hour\"\n              label={{ basic: true, content: \"From hour\" }}\n              labelPosition=\"left\"\n              type=\"time\"\n            />\n          </GridColumn>\n          <GridColumn>\n            <Input\n              icon=\"clock\"\n              name=\"endHour\"\n              value={endHour}\n              onChange={handleChange}\n              placeholder=\"Till hour\"\n              label={{ basic: true, content: \"Till hour\" }}\n              labelPosition=\"left\"\n              type=\"time\"\n            />\n          </GridColumn>\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default FormHeader;\n","export const errorStrings = {\n  getResultsError:\n    \"There was an error while doing API request. Check if API key/Project ID is correct.\",\n  getTraceError: \"Error retrieving trace from jobs\",\n  getPipelineError: \"Error retrieving pipeline jobs data\"\n};\n","import React, { useState } from \"react\";\nimport { Segment, Grid, GridColumn, Message } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport API from \"../../apis\";\nimport Spinner from \"../Spinner\";\nimport StepsTable from \"../StepsTable\";\nimport FormHeader from \"../FormHeader\";\nimport { errorStrings } from \"../../data/errorStrings\";\nfunction App() {\n  const urlParameters = new URLSearchParams(window.location.search);\n  const [state, setState] = useState({\n    displayedData: \"\",\n    apiKey: process.env.REACT_APP_API_KEY,\n    projectID:\n      process.env.REACT_APP_PROJECT_ID === null\n        ? urlParameters.get(\"projectId\") === null\n          ? \"\"\n          : urlParameters.get(\"projectId\")\n        : process.env.REACT_APP_PROJECT_ID,\n    isError: false,\n    selectedDate: new Date().toISOString().substring(0, 10),\n    isSearching: false,\n    pipelinesNumber: null,\n    jobsNumber: null,\n    testFailsNumber: null,\n    dateOfCheck: null,\n    startHour: \"00:00\",\n    endHour: \"23:59\"\n  });\n\n  const searchCall = searchTerm => {\n    setState(prevState => ({\n      ...prevState,\n      isSearching: true,\n      isError: false,\n      pipelinesNumber: null,\n      jobsNumber: null,\n      testFailsNumber: null,\n      dateOfCheck: state.selectedDate\n    }));\n    let nextDayDate = new Date(state.selectedDate);\n    nextDayDate.setDate(nextDayDate.getDate() + 1);\n    return API.get(\n      `/projects/${state.projectID}/pipelines?updated_after=${state.selectedDate}T${state.startHour}:00Z&order_by=updated_at&sort=asc&updated_before=${nextDayDate}T${state.endHour}:00Z`,\n      {\n        headers: {\n          \"PRIVATE-TOKEN\": state.apiKey\n        }\n      }\n    )\n      .then(res => {\n        retriveJobs(res.data);\n        setState(prevState => ({\n          ...prevState,\n          pipelinesNumber: res.data.length\n        }));\n      })\n      .catch(error => {\n        setState(prevState => ({\n          ...prevState,\n          isError: true,\n          isSearching: false\n        }));\n      });\n  };\n  const handleChange = e => {\n    const { name, value } = e.target;\n    if (name === \"selectedDate\") {\n      setState(prevState => ({\n        ...prevState,\n        [name]: value.substring(0, 10)\n      }));\n    } else {\n      setState(prevState => ({\n        ...prevState,\n        [name]: value\n      }));\n    }\n  };\n  const retriveJobs = receivedPipelines => {\n    let jobsCollection = [];\n    let callsCollection = [];\n    receivedPipelines.forEach(pipeline => {\n      callsCollection.push(\n        API.get(`/projects/${state.projectID}/pipelines/${pipeline.id}/jobs`, {\n          headers: {\n            \"PRIVATE-TOKEN\": state.apiKey\n          }\n        })\n          .then(res => {\n            res.data.forEach(job => {\n              jobsCollection.push(job.id);\n            });\n          })\n          .catch(error => {\n            console.log(errorStrings.getPipelineError);\n          })\n      );\n    });\n    Promise.all(callsCollection).then(() => {\n      retrieveAndProcessArtifacts(jobsCollection);\n      setState(prevState => ({\n        ...prevState,\n        jobsNumber: jobsCollection.length\n      }));\n    });\n  };\n  const retrieveAndProcessArtifacts = receivedJobs => {\n    let stepsContainer = [];\n    let callsCollection = [];\n    const regExp = /(?<=Failed Step: ).*?\\n/g;\n    receivedJobs.forEach(jobId => {\n      callsCollection.push(\n        API.get(`/projects/${state.projectID}/jobs/${jobId}/trace`, {\n          headers: {\n            \"PRIVATE-TOKEN\": state.apiKey\n          }\n        })\n          .then(async res => {\n            const returnedSteps = res.data.match(regExp);\n            if (returnedSteps !== null) {\n              await stepsContainer.push(...returnedSteps);\n            }\n          })\n          .catch(error => {\n            console.log(errorStrings.getTraceError);\n          })\n      );\n    });\n    Promise.all(callsCollection).then(() => {\n      setState(prevState => ({\n        ...prevState,\n        isError: false,\n        isSearching: false,\n        displayedData: stepsContainer,\n        testFailsNumber: stepsContainer.length\n      }));\n    });\n  };\n  return (\n    <Segment>\n      <FormHeader\n        projectID={state.projectID}\n        apiKey={state.apiKey}\n        selectedDate={state.selectedDate}\n        handleChange={handleChange}\n        searchCall={searchCall}\n        startHour={state.startHour}\n        endHour={state.endHour}\n      ></FormHeader>\n      <Grid columns=\"equal\">\n        <GridColumn width=\"8\">\n          {!state.isError &&\n            !state.isSearching &&\n            state.displayedData.length !== 0 && (\n              <StepsTable displayedData={state.displayedData}></StepsTable>\n            )}\n          {state.isError && (\n            <Message negative>\n              <Message.Header data-testid=\"messageBox\">\n                {errorStrings.getResultsError}\n              </Message.Header>\n            </Message>\n          )}\n          {state.isSearching && <Spinner />}\n        </GridColumn>\n        <GridColumn width=\"4\">\n          {!state.isError && state.pipelinesNumber !== null && (\n            <Message>\n              <p>Check for date: {state.dateOfCheck} </p>\n              <p>Pipelines retrieved: {state.pipelinesNumber} </p>\n              {state.jobsNumber !== null && (\n                <p> Jobs retrieved: {state.jobsNumber} </p>\n              )}\n              {state.testFailsNumber !== null && (\n                <p> Failed steps: {state.testFailsNumber} </p>\n              )}\n            </Message>\n          )}\n        </GridColumn>\n      </Grid>\n    </Segment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}